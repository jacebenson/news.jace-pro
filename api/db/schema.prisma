generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  // we default this to sqlite so you can try this before you
  // plugin in a database.. your choices for databse providers
  // are the following
  // PostgreSQL
  // provider = "postgresql"
  // MySQL
  // provider = "mysql"
  // SQLite // probably only for testing
  // provider = "sqlite"
  // url      = "file:./dev.db"
  // MongoDB
  // provider = "mongodb"
  // Microsoft SQL Server

  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = env("TEST_DATABASE_URL")

}

model Property {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String
}

model User {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  // Users's email
  email               String        @unique
  name                String        @default("")
  hashedPassword      String        @default("")
  salt                String        @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  GroupMember         GroupMember[] @relation("UserGroupMember")
  Preference          Preference[]  @relation("UserPreference")
  Participant         Participant[] @relation("ParticipantUser")
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userId    Int
  user      User     @relation("UserPreference", fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String
  GroupMember GroupMember[] @relation("UserGroup")
  GroupRole   GroupRole[]
  Source      Source[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  group     Group    @relation("UserGroup", fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userId], references: [id], onDelete: Cascade)
}

model GroupRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Source {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  contentType String    @default("text")
  // text, audio, video, interactive
  feedLink    String
  Article     Article[] @relation("ArticleSource")
  groupId     Int       @default(1)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

}

model Article {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  link         String        @unique
  timesListed  Int?          @default(0)
  timesClicked Int?          @default(0)
  sourceId     Int
  source       Source        @relation("ArticleSource", fields: [sourceId], references: [id], onDelete: Cascade)
  Participant  Participant[] @relation("ParticipantContent")
}

model Participant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation("ParticipantUser", fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article  @relation("ParticipantContent", fields: [articleId], references: [id], onDelete: Cascade)
}
